let wasm,cachedUint8Memory0=null;function getUint8Memory0(){return null!==cachedUint8Memory0&&0!==cachedUint8Memory0.byteLength||(cachedUint8Memory0=new Uint8Array(wasm.memory.buffer)),cachedUint8Memory0}function getArrayU8FromWasm0(e,t){return e>>>=0,getUint8Memory0().subarray(e/1,e/1+t)}const heap=new Array(128).fill(void 0);function getObject(e){return heap[e]}heap.push(void 0,null,!0,!1);let heap_next=heap.length;function dropObject(e){e<132||(heap[e]=heap_next,heap_next=e)}function takeObject(e){const t=getObject(e);return dropObject(e),t}let WASM_VECTOR_LEN=0;function passArray8ToWasm0(e,t){const n=t(1*e.length,1)>>>0;return getUint8Memory0().set(e,n/1),WASM_VECTOR_LEN=e.length,n}function addHeapObject(e){heap_next===heap.length&&heap.push(heap.length+1);const t=heap_next;return heap_next=heap[t],heap[t]=e,t}let cachedFloat64Memory0=null;function getFloat64Memory0(){return null!==cachedFloat64Memory0&&0!==cachedFloat64Memory0.byteLength||(cachedFloat64Memory0=new Float64Array(wasm.memory.buffer)),cachedFloat64Memory0}function passArrayF64ToWasm0(e,t){const n=t(8*e.length,8)>>>0;return getFloat64Memory0().set(e,n/8),WASM_VECTOR_LEN=e.length,n}export function image_convolute(e,t,n,a,o,i,r){var s=passArray8ToWasm0(e,wasm.__wbindgen_malloc),c=WASM_VECTOR_LEN,_=passArray8ToWasm0(t,wasm.__wbindgen_malloc),m=WASM_VECTOR_LEN;const l=passArrayF64ToWasm0(o,wasm.__wbindgen_malloc),b=WASM_VECTOR_LEN;wasm.image_convolute(s,c,addHeapObject(e),_,m,addHeapObject(t),n,a,l,b,i,r)}async function __wbg_load(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function __wbg_get_imports(){const e={wbg:{}};return e.wbg.__wbindgen_copy_to_typed_array=function(e,t,n){new Uint8Array(getObject(n).buffer,getObject(n).byteOffset,getObject(n).byteLength).set(getArrayU8FromWasm0(e,t))},e.wbg.__wbindgen_object_drop_ref=function(e){takeObject(e)},e}function __wbg_init_memory(e,t){}function __wbg_finalize_init(e,t){return wasm=e.exports,__wbg_init.__wbindgen_wasm_module=t,cachedFloat64Memory0=null,cachedUint8Memory0=null,wasm}function initSync(e){if(void 0!==wasm)return wasm;const t=__wbg_get_imports();return __wbg_init_memory(t),e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e)),__wbg_finalize_init(new WebAssembly.Instance(e,t),e)}async function __wbg_init(e){if(void 0!==wasm)return wasm;void 0===e&&(e=new URL("image_convolute_bg.wasm",import.meta.url));const t=__wbg_get_imports();("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e)),__wbg_init_memory(t);const{instance:n,module:a}=await __wbg_load(await e,t);return __wbg_finalize_init(n,a)}export{initSync};export default __wbg_init;